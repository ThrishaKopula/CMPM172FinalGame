[gd_scene load_steps=14 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]
[ext_resource path="res://Scenes/leoStuff/HUD/HUD.tscn" type="PackedScene" id=2]
[ext_resource path="res://Scenes/leoStuff/player.tscn" type="PackedScene" id=3]
[ext_resource path="res://Scenes/leoStuff/test_talk.gd" type="Script" id=4]
[ext_resource path="res://art/blue.png" type="Texture" id=5]

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 220.5, 181 )

[sub_resource type="Shader" id=2]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 2.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/angle = -0.3
shader_param/position = -0.2
shader_param/spread = 0.5
shader_param/cutoff = 0.1
shader_param/falloff = 0.2
shader_param/edge_fade = 0.15
shader_param/speed = 2.0
shader_param/ray1_density = 8.0
shader_param/ray2_density = 30.0
shader_param/ray2_intensity = 0.3
shader_param/color = Color( 1, 0.9, 0.65, 0.8 )
shader_param/hdr = false
shader_param/seed = 5.0

[sub_resource type="Curve" id=4]
min_value = -360.0
max_value = 360.0
_data = [ Vector2( 0, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 16.3636 ), -215.629, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=5]
curve = SubResource( 4 )

[sub_resource type="Gradient" id=6]
offsets = PoolRealArray( 0.461988, 0.912281 )
colors = PoolColorArray( 0.789474, 0.789474, 0.789474, 1, 0.964706, 0.964706, 0.964706, 0.462745 )

[sub_resource type="GradientTexture" id=7]
gradient = SubResource( 6 )

[sub_resource type="ParticlesMaterial" id=8]
emission_shape = 2
emission_box_extents = Vector3( 200, 20, 3 )
flag_disable_z = true
gravity = Vector3( 125, 98, 1 )
initial_velocity = 10.0
initial_velocity_random = 0.5
orbit_velocity = 0.0
orbit_velocity_random = 0.0
linear_accel = 15.0
linear_accel_random = 0.3
angle_curve = SubResource( 5 )
color = Color( 1, 1, 1, 0.85098 )
color_ramp = SubResource( 7 )
hue_variation_random = 0.01

[node name="test scene" type="Node2D"]

[node name="Sprite2" type="Sprite" parent="."]
position = Vector2( 789, 535.5 )
scale = Vector2( 25.6563, 17.7344 )
texture = ExtResource( 1 )

[node name="Sprite" type="Sprite" parent="."]
position = Vector2( -921, -113 )
scale = Vector2( 25.6563, 17.7344 )
texture = ExtResource( 1 )
offset = Vector2( 99.9367, 8.82467 )

[node name="Sprite3" type="Sprite" parent="."]
position = Vector2( 1150, 786 )
scale = Vector2( 6.82089, 7.20465 )
z_index = -1
texture = ExtResource( 5 )
offset = Vector2( 99.9367, 8.82467 )

[node name="Icon" type="Sprite" parent="."]
position = Vector2( 941.433, 845.433 )
scale = Vector2( 7.23228, 6.79477 )
texture = ExtResource( 1 )

[node name="Area2D" type="Area2D" parent="."]
script = ExtResource( 4 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
position = Vector2( -37, 857 )
shape = SubResource( 1 )

[node name="Sprite" type="Sprite" parent="Area2D/CollisionShape2D"]
position = Vector2( 0.999989, -0.5 )
scale = Vector2( 6.8125, 5.70313 )
texture = ExtResource( 1 )

[node name="KinematicBody2D" parent="." instance=ExtResource( 3 )]
position = Vector2( 426, 848 )

[node name="HUD" parent="KinematicBody2D" instance=ExtResource( 2 )]

[node name="light" type="Sprite" parent="."]
material = SubResource( 3 )
position = Vector2( 691.25, 705.375 )
scale = Vector2( 9.25781, 11.8008 )
texture = ExtResource( 1 )

[node name="leaves" type="Node2D" parent="."]

[node name="Particles2D" type="Particles2D" parent="leaves"]
position = Vector2( 200, 314 )
amount = 10
lifetime = 3.0
explosiveness = 0.1
randomness = 1.0
process_material = SubResource( 8 )
texture = ExtResource( 1 )

[connection signal="body_entered" from="Area2D" to="Area2D" method="_on_Area2D_body_entered"]
[connection signal="body_exited" from="Area2D" to="Area2D" method="_on_Area2D_body_exited"]

[editable path="KinematicBody2D/HUD"]
